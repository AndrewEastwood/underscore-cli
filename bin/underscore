#!/usr/bin/env node

var _             = require('underscore');
_.mixin(require('underscore.string'));
var program       = require('commander');
var fs            = require('fs');
var util          = require('util');
var JSONSelect    = require('JSONSelect');
var inputFormats  = require('../lib/input-formats');
var outputFormats = require('../lib/output-formats');

var defaultInputFormat  = 'lax';
var defaultOutputFormat = 'lax';

try {
  version = JSON.parse(fs.readFileSync(__dirname + '/../package.json')).version;
} catch(e) {
  console.error("Error parsing 'package.json'.  Installation is corrupted: ", e.stack);
  version = 'unknown';
}

program.version(version);

function addStandardOptions(command) {
  command
    .option('-i, --in <filename>', 'The data file to load.  If not specified, defaults to stdin.')
    .option('--infmt <format>', 'The format of the input data. See \'help formats\'')
    .option('-o, --out <filename>', 'The output file.  If not specified, defaults to stdout.')
    .option('--outfmt <format>', 'The format of the output data. See \'help formats\'')
    .option('-d, --data <JSON>', 'Input data provided in lieu of a filename')
    .option('-n, --nodata', "Input data is 'undefined'")
    .option('-q, --quiet', "Suppress normal output.  'console.log' will still trigger output.")
    .option('--strict', "Use strict JSON parsing instead of more lax 'eval' syntax.  To avoid security concerns, use this with ANY data from an external source.")
}

function addExpressionOptions(command) {
  command.option('--nowrap', "Instead of an expression like 'value+1', provide a full function body like 'return value+1;'.");
}

addStandardOptions(program);
addExpressionOptions(program);

var Command = program.Command;

Command.prototype.commandHelp = function () {
  var cmds = _(program.commands)
    .reject(function (cmd) { return cmd.name === '*'; })
    .map(function(cmd){
      var args = _(cmd.args)
        .map(function(arg){
          return arg.required
            ? '<' + arg.name.replace('expression', 'exp') + '>'
            : (arg.name == 'command' ? '[' + arg.name + ']' : '');
        })
        .join(' ');
      return [cmd.name + ' ' + args, cmd.description()];
    });

  var maxlen = _.max(_.map(cmds, function (cmd) { return cmd[0].length; }));

  return _.map(cmds, function (cmd) {
    return _.sprintf('%-' + maxlen + 's %s', cmd[0], cmd[1]);
  }).join('\n').replace(/^/gm, ' ');
};

Command.prototype.examplesHelp = function () {
  var examples = this.examples;
  var format = this.defaultOutputFormat ? this.defaultOutputFormat : defaultOutputFormat;
  var formatter = outputFormats[format];
  if (!_.isArray(examples)) {
    examples = [examples];
  }
  return _.map(examples, function (example) {
    return _.map(example, function (result, text) {
      try {
        return (text.match(/underscore/) ? '' : 'underscore ') + text + "\n" + formatter.stringify(result).replace(/^/gm, "# ") + "\n";
      } catch (e) {
        console.log("ERROR with '%s': %s", text, e.stack);
        process.exit(-1);
      }
    }).join("\n");
  }).join("\n");
};

Command.prototype.notesHelp = function () {
  var notes = this.notes;
  if (_.isArray(notes)) {
    return notes.join("\n");
  } else if (notes) {
    return notes;
  } else if (this._description) {
    return this._description;
  } else {
    return '';
  }
}

Command.prototype.usage = function(str){
  var opts = _.reject(program.options, function (o) { return o.flags.match(/--in\b|--data|--nodata|--version/); });
  var optsStr = '[--in <filename>|--data <JSON>|--nodata] ' + _.compact(opts.map(function (o) { return '[' + o.flags.replace(/.*, */, '') + ']' })).join(' ');
  
  var args = this.args.map(function(arg){
    return arg.required
      ? '<' + arg.name + '>' 
      : '[' + arg.name + ']';
  });

  if (this.commands.length > 0) {
    args.push('<command>');
  }

  return args.join(' ') + ' ' + optsStr;
};

Command.prototype.fullName = function () {
  if (this.parent) {
    return this.parent.fullName() + ' ' + this.name;
  } else {
    return this.name;
  }
};

function indent(str, spaces) {
  return str.replace(/^/gm, spaces);
}

Command.prototype.helpInformation = function () {
  
  var help = [
      ''
    , '  Usage: ' + this.fullName() + ' ' + this.usage()
    , ''
    , '' + indent(this.notesHelp(), '  ')
  ];

  help = help.concat(this.commands.length == 0 ? [] : [
      '  Commands:'
    , ''
    , '' + indent(this.commandHelp(), '    ')
    , ''
  ]);
  
  help = help.concat([
    , ''
    , '  Options:'
    , ''
    , '' + indent(this.optionHelp(), '    ')
  ]);
    
  help = help.concat([
    , ''
    , '  Examples:'
    , ''
    , '' + indent(this.examplesHelp(), '    ')
  ]);
  
  return help.join('\n');
};

Command.prototype.command = function (args) {
  if (_.isString(args)) {
    args = { name: args };
  }
  
  var args2 = args.name.split(/ +/);
  var cmd = new Command(args2.shift());
  this.commands.push(cmd);
  cmd.parseExpectedArgs(args2);
  cmd.parent = this;
  
  if (args.description) {
    cmd.description(args.description);
  }
  
  return cmd;
 
};

function defineCommand(opts) {
  var name = opts.name;
  var description = opts.description;
  var fn = opts.fn;

  var cmd = program.command(opts);
  cmd.examples = opts.examples;
  cmd.notes = opts.notes;
  cmd.defaultOutputFormat = opts.defaultOutputFormat;
  cmd.defaultInputFormat = opts.defaultInputFormat;
  
  if (opts.fn) {
    addStandardOptions(cmd);
    if (opts.expr) {
      addExpressionOptions(cmd);
      cmd.action(function(expression, a, b, c) {
        var userFn = getUserFn(expression, opts.expr);
        processData(function(data) {
          return fn(data, userFn, a, b, c);
        });
      });
    } else {
      cmd.action(function(a, b, c, d, e) {
        if (cmd.defaultOutputFormat) {
          defaultOutputFormat = cmd.defaultOutputFormat;
        }
        if (opts.defaultInputFormat) {
          defaultInputFormat = cmd.defaultInputFormat;
        }
        processData(function (data) {
          return fn(data, a, b, c, d, e);
        });
      });
    }
  }
  
  return cmd;
}

function printHelp() {
  if (arguments.length > 0) {
    console.error.apply(console.error, arguments);
    console.error(program.helpInformation());
    process.exit(1);
  } else {
    console.log(program.helpInformation());
    process.exit(0);
  }
}

program.examples = {
    "map --data '[1, 2, 3, 4]' 'value+1'"                     :  [2, 3, 4, 5],
    "map --data '{\"a\": [1, 4], \"b\": [2, 8]}' '_.max(value)'":  [4, 8],
    "echo '{\"foo\":1, \"bar\":2}' | underscore map -q 'console.log(\"key = \", key)'": "key = foo\nkey = bar",
    "pluck --data \"[{name : 'moe', age : 40}, {name : 'larry', age : 50}, {name : 'curly', age : 60}]\" name": ["moe", "larry", "curly"],
    "keys --data '{name : \"larry\", age : 50}'"              : ["name", "age"],
    "reduce --data '[1, 2, 3, 4]' 'total+value'"              : 10,
};

program.command('*').action(function (cmd) {
  printHelp("Unknown command: '%s'", cmd);
});

defineCommand({
  name: 'help [command]',
  description: "Print more detailed help and examples for a specific command"
}).action(function(command) {
  if(! command) {
    printHelp();
  } else {
    var commandObj = _.find(program.commands, function (obj) { return obj.name==command });
    if(commandObj) {
      console.log(commandObj.helpInformation());
      process.exit(0);
    } else {
      printHelp("Unknown command: " + command);
    }
  }
});

defineCommand({
  name: 'examples',
  description: "Print an exhaustive list of ALL examples"
}).action(function() {
  console.log(_.compact(_.map(program.commands, function (cmd) {
    return cmd.examplesHelp();
  })).join('\n'));
  process.exit(0);
});

defineCommand({
  name: 'type',
  description: 'Print the type of the input data: {object, array, number, string, boolean, null, undefined}',
  fn: function (data) {
    if (_.isArray(data)) {
      return 'array';
    } else if (_.isObject(data)) {
      return 'object';
    } else if (_.isString(data)) {
      return 'string';
    } else if (_.isNumber(data)) {
      return 'number';
    } else if (_.isBoolean(data)) {
      return 'boolean';
    } else if (_.isNull(data)) {
      return 'null';
    } else if (_.isUndefined(data)) {
      return 'undefined';
    } else {
      return 'UNKNOWN? (this is a bug; please report it to https://github.com/ddopson/underscore-cli/issues)';
    }
  },
  examples: {
    'type --data \'[]\''        : 'array',
    'type --data \'{}\''        : 'object',
    'type --data 99'            : 'number',
    'type --data \'99\''        : 'number',
    'type --data \'"99"\''      : 'string',
    'type --data \'false\''     : 'boolean',
    'type --nodata'             : 'null',
    'type --data \'null\''      : 'null',
    'type --data \'undefined\'' : 'undefined',
  }
});

defineCommand({
  name: 'print',
  description: "Output the data without any transformations. Can be used to pretty-print JSON data.",
  fn: function (data) { return data; },
  examples: {
    "print --data '[1, 2, 3, 4]'": [1, 2, 3, 4],
    "cat example-data/simple.json | underscore print": {foo: 'bar', baz: [1, 2, 3]},
  }
});

defineCommand({
  name: 'process <expression>',
  description: "Run arbitrary JS against the input data.  Expression Args: (data)",
  expr: ['data'],
  fn: function (data, userFn) {
    return userFn(data);
  },
  examples: {
    "process --data '\"my-string\"' '_.camelize(data)'": "myString",
    "process --data '[1, 2, 3, 4]' '_.max(data)'": 4
  }
});

defineCommand({
  name: 'extract <field>',
  description: "Extract a field from the input data.  Also supports field1.field2.field3",
  fn: function (data, field) {
    var fields = field.split('.');
    var sofar = ''; 
    _.map(fields, function (f) {
      if (data[f] !== undefined) {
        data = data[f];
        sofar = sofar + '.' + f;
      } else {
        throw new Error(util.format("data%s does not contain field '%s'", sofar, f));
      }
    });
    return data;
  },
  examples: {
    "extract field1.field2.field3 --data '{field1: {field2: { field3: 1234 }}}'": 1234
  }
});


defineCommand({
  name: 'map <expression>',
  description: "Map each value from a list/object through a transformation expression whose arguments are (value, key, list).'",
  expr: ["value", "key", "list"],
  fn: _.map,
  examples: {
    "map --data '[1, 2, 3, 4]' 'value+1'":  [2, 3, 4, 5],
    "map --data '{\"a\": 1, \"b\": 2}' 'key === \"a\" ? value+1 : value-1'":  [2, 1],
    "map --data '{\"a\": [1, 4], \"b\": [2, 8]}' 'value[1]/value[0]'":  [4, 4],
    "map --data '{\"a\": [1, 4], \"b\": [2, 8]}' '_.max(value)'":  [4, 8],
  }
});

defineCommand({
  name: 'reduce <expression> [initial_value]',
  description: "Boil a list down to a single value by successively combining each element with a running total.  Expression args: (total, value, key, list)",
  expr: ['total', 'value', 'key', 'list'],
  fn: function (data, userFn, initial) { 
    if (initial) {
      return _.reduce(data, userFn, parseInput(initial, initial));
    } else {
      return _.reduce(data, userFn); // total == first value
    }
  },
  examples: {
    "reduce --data '[1, 2, 3, 4]' 'total+value'":        10,
    "reduce --data '[1, 2, 3, 4]' 'total+\"\"+value'":   '1234',
    "reduce --data '[1, 2, 3, 4]' 'total+\"\"+value' 0": '01234',
  }
});

defineCommand({
  name: 'reduceRight <expression> [initial_value]',
  description: "Right-associative version of reduce. ie, 1 + (2 + (3 + 4)). Expression args: (total, value, key, list)",
  expr: ['total', 'value', 'key', 'list'],
  fn: function (data, userFn, initial) { 
    if (initial) {
      return _.reduceRight(data, userFn, parseInput(initial, 'initial_value'));
    } else {
      return _.reduceRight(data, userFn); // total == first value
    }
  },
  examples: {
    "reduceRight --data '[1, 2, 3, 4]' 'total+value'": 10,
    "reduceRight --data '[1, 2, 3, 4]' 'total+\"\"+value'": '4321',
    "reduceRight --data '[1, 2, 3, 4]' 'total+\"\"+value' 0": '04321',
  }
});

defineCommand({
  name: 'select <jselexp>',
  description: "Run a 'JSON Selector' query against the input data. See jsonselect.org.",
  fn: function (data, sel) {
    return JSONSelect.match(sel, data); 
  },
  examples: {
    "underscore -i example-data/earthporn.json select '.children .title'": 
    [ 'Eating breakfast in the Norwegian woods! Captured with my phone [2448x3264] ',
      'The Rugged Beauty of Zion NP Utah at Sunrise [OC] (1924x2579)',
      'Falls and island near Valdez, AK on a rainy day [4200 x 3000]',
      'Havasu Falls, Havasupai, Arizona.  This is a personal photograph from a trip I took in 2006 before the flood of 2008 [960x1280]',
      'Victoria Amazonica in Brazil, SC [2448X3264]',
      'A dreamy haze flows over the Alaska Range on the Castner Glacier [4948 x 3280]' ]
  }
});

defineCommand({
  name: 'find <expression>',
  description: "Return the first value for which the expression Return a truish value.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.find,
  examples: {
    "find --data '[1, 2, 3, 4]' 'value > 2'": 3,
    "find --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": 2,
  }
});

defineCommand({
  name: 'filter <expression>',
  description: "Return an array of all values that make the expression true.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.filter,
  examples: {
    "filter --data '[1, 2, 3, 4]' 'value > 2'": [3, 4],
    "filter --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": [2],
  }
});

defineCommand({
  name: 'reject <expression>',
  description: "Return an array of all values that make the expression false.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.reject,
  examples: {
    "reject --data '[1, 2, 3, 4]' 'value > 2'": [1, 2],
    "reject --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": [1],
  }
});

defineCommand({
  name: 'flatten', 
  description: "Flattens a nested array (the nesting can be to any depth). If you pass '--shallow', the array will only be flattened a single level.",
  fn: function (data) { return _.flatten(data, program.args[0].shallow ? true : false); },
  examples: {
    "flatten --data '[1, [2, [3]], 4]'":            [1, 2, 3, 4],
    "flatten --shallow --data '[1, [2, [3]], 4]'":  [1, 2, [3], 4]
  }
}).option('--shallow', 'Only flatten array by a single level');

defineCommand({
  name: 'pluck <key>',
  description: "Extract a single property from a list of objects",
  fn: _.pluck,
  examples: {
    "pluck --data \"[{name : 'moe', age : 40}, {name : 'larry', age : 50}, {name : 'curly', age : 60}]\" name": ["moe", "larry", "curly"]
  }
});

defineCommand({
  name: 'keys',
  description: "Retrieve all the names of an object's properties.",
  fn: _.keys,
  examples: {
    "keys --data '{name : \"larry\", age : 50}'": ["name", "age"],
    "keys --data '[8, 9, 10]'": ['0', '1', '2'],
  }
});

defineCommand({
  name: 'values',
  description: "Retrieve all the values of an object's properties.",
  fn: _.values,
  examples: {
    "values --data '{name : \"larry\", age : 50}'": ["larry", 50],
    "values --data '[8, 9, 10]'": [8, 9, 10],
  }
});

defineCommand({
  name: 'extend <object>',
  aliases: ['override'],
  description: "Override properties in the input data.",
  fn: function (data, data2) {
    data2 = parseInput(data2, 'override_data');
    return _.extend(data, data2);
  },
  examples: {
    "extend --data '{name : \"larry\", age : 50}' '{age: 65}'": {name: "larry", age: 65}
  }
});

defineCommand({
  name: 'defaults <object>',
  description: "Fill in missing properties in the input data.",
  fn: function (data, data2) {
    data2 = parseInput(data2, 'default_data');
    return _.defaults(data, data2);
  },
  examples: {
    "defaults --data '{name : \"larry\", age : 50}' '{name: \"unknown\", salary: 100}'": {name: "larry", age: 50, salary: 100}
  }
});

defineCommand({
  name: 'any <expression>',
  description: "Return 'true' if any of the values in the input make the expression true.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.any,
  examples: {
    "any --data '[1, 2, 3, 4]' 'value > 5'": false,
    "any --data '[1, 2, 3, 4]' 'value > 2'": true,
    "any --data '[1, 2, 3, 4]' 'value > 0'": true,
    "any --data '{foo: 1, bar: 2}' 'key == \"bar\"'": true,
  }
});

defineCommand({
  name: 'all <expression>',
  description: "Return 'true' if all values in the input make the expression true.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.all,
  examples: {
    "all --data '[1, 2, 3, 4]' 'value > 5'": false,
    "all --data '[1, 2, 3, 4]' 'value > 2'": false,
    "all --data '[1, 2, 3, 4]' 'value > 0'": true,
    "all --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": false,
  }
});

defineCommand({
  name: 'isObject',
  description: "Return 'true' if the input data is an object with named properties",
  fn: function (data) {
    if (program.args[0].arraysAreObjects) {
      return _.isObject(data);
    } else {
      return _.isObject(data) && ! _.isArray(data);
    }
  },
  examples: {
    "isObject --data '{name : \"larry\", age : 50}'": true,
    "isObject --data '[]'": false,
    "isObject --data '[]' --arrays-are-objects": true
  }
}).option('--arrays-are-objects', 'Restore the default underscore.js behavior where Array() is a type of object');

defineCommand({
  name: 'isArray',
  description: "Return 'true' if the input data is an array",
  fn: _.isArray,
  examples: {
    "isArray --data '{name : \"larry\", age : 50}'": false,
    "isArray --data '[]'": true
  }
});

defineCommand({
  name: 'isString',
  description: "Return 'true' if the input data is a string",
  fn: _.isString,
  examples: {
    "isString --data '{}'"      : false,
    "isString --data '[]'"      : false,
    "isString --data \"'foo'\"" : true
  }
});

defineCommand({
  name: 'isNumber',
  description: "Return 'true' if the input data is a number",
  fn: _.isNumber,
  examples: {
    "isNumber --data '{}'"    : false,
    "isNumber --data '[]'"    : false,
    "isNumber --data \"'9'\"" : false,
    "isNumber --data \"9\""   : true,
  }
});

defineCommand({
  name: 'isBoolean',
  description: "Return 'true' if the input data is a boolean, ie {true, false}",
  fn: _.isBoolean,
  examples: {
    "isBoolean --data '0'"     : false,
    "isBoolean --data '1'"     : false,
    "isBoolean --data 'true'"  : true,
    "isBoolean --data 'false'" : true,
  }
});

defineCommand({
  name: 'isNull',
  description: "Return 'true' if the input data is the 'null' value",
  fn: _.isNull,
  examples: {
    "isNull --data '0'"         : false,
    "isNull --data '1'"         : false,
    "isNull --data 'false'"     : false,
    "isNull --data 'null'"      : true,
    "isNull --data 'undefined'" : false,
  }
});

defineCommand({
  name: 'isUndefined',
  description: "Return 'true' if the input data is undefined",
  fn: _.isUndefined,
  examples: {
    "isUndefined --data '0'"         : false,
    "isUndefined --data '1'"         : false,
    "isUndefined --data 'false'"     : false,
    "isUndefined --data 'null'"      : false,
    "isUndefined --data 'undefined'" : true,
  }
});

defineCommand({
  name: 'template <filename>',
  description: "Process an underscore template and print the results. See 'help template'",
  notes: [
    'Process an underscore template and print the results.  Template syntax is similar to the ERB templates used in Ruby:',
    "Variables can be interpolated with <%= ... %>, or drop the '=' character to run code without interpolating the result.",
    'Note that functions like _.map are available inside the template and loops can span multiple interpolation boundaries.',
    'For creating XML/HTML, I reccommend that you consider HAML/JADE templates.  For general text, _.template is as good as it gets',
    '',
    'See http://documentcloud.github.com/underscore/#template.'
  ],
  fn: function (data, filename) {
    try {
      var template = fs.readFileSync(filename, 'utf8');
    } catch (e) {
      console.error("Error reading template file '%s': %s", filename, e.message);
      process.exit(-1);
    }

    try {
      var output = _.template(template, data);
    } catch (e) {
      console.error("Error processing template file '%s': %s", filename, e.message);
      process.exit(-1);
    }

    return output;
  },
  defaultOutputFormat: 'text',
  examples: {
    "template --data '{name: \"moe\"}' example-data/trivial.template": "hello moe",
  }
});


// Object Stuff
//functions - does this make sense?  point it at a module with 'eval/require'

// other
// range
// indexOf
// lastIndexOf
// zip
// [mine] zipObject
// uniq
// intersection
// [skip] difference
// union
// without
// [mine] withoutKeys
// compact
// map --compact
// last
// first


program
  .parse(process.argv);

if (program.args.length === 0) {
  printHelp();  
}

function getUserFn(expression, args) {
    var code = '(function (' + args.join() + '){' + 
      (program.nowrap ? expression : ('return (' + expression + ');')) + 
    '})';
    try {
        var userFn = eval (code);
    } catch (e) {
      console.error("Error while compiling user expression '%s': %s", code, e.message);
      process.exit(-1);
    }
    return userFn;
}

function processData(fn) {
  inputData(function(data) {
    try {
      var output = fn(data);
    } catch (e) {
      console.error("Error while processing data: %s", e.stack);
      process.exit(-1);
    }
    outputData(output);
    process.exit(0);
  });
}

function parseInput(text, source) {
  if (text === undefined) {
    return undefined;
  }
  var format;
  if (program.infmt) {
    format = program.infmt;
  } else if (program.strict) {
    format = 'strict';
  } else {
    format = 'lax';
  }

  if (! inputFormats[format]) {
    console.error("Unrecognized input format: '%s'.  See 'help formats'", format);
    process.exit(-1);
  }

  var formatObj = inputFormats[format];
  
  if(!text.match(/./)) {
    console.error("Error while parsing %s: File is empty!", source);
    process.exit(-1);
  }
  
  try {
    return formatObj.parse(text);
  } catch (e) {
    console.error("Error while parsing %s in mode '%s': %s", source, format, e.message);
    process.exit(-1);
  }
}

function inputData(cb) {
  var text, data;
  if (program.data) {
    text = program.data;
    data = parseInput(text, "'--data' argument");
    cb(data);
  } else if (program.nodata) {
    cb(null);
  } else if (program.in) {
    try {
      text = fs.readFileSync(program.in, 'utf8');
    } catch (e) {
      console.error("Error while reading input file '%s': %s", program.in, e.message);
      process.exit(-1);
    }
    var data = parseInput(text, "'" + program.in + "'");
    cb(data);
  } else {
    process.stdin.resume();
    text = "";
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', function (d) {
      text += d;
    });
    process.stdin.on('end', function () {
      data = parseInput(text, 'STDIN');
      cb(data);
    });
  }  
}

function outputData(data) {
  if(!program.quiet) {
    
    var format;
    if (program.outfmt) {
      format = program.outfmt;
    } else if (program.strict) {
      format = 'json';
    } else {
      format = defaultOutputFormat;
    }
  
    if (! outputFormats[format]) {
      var valid_formats = "['" + _.keys(outputFormats).join("', '") + "']";
      console.error("Unrecognized output format: '%s'.  See 'help formats', or select from %s", format, valid_formats);
      process.exit(-1);
    }
          
    var output;
    try {
       output = outputFormats[format].stringify(data);
    } catch (e) {
      console.error("Error formatting output data in mode '%s': %s", format, e.message);
      process.exit(-1);
    }
    
    if (program.out) {
      try {
        fs.writeFileSync(program.out, output, 'utf8');
      } catch (e) {
        console.error("Error while writing to output file '%s': ", program.out, e.message);
        process.exit(-1);
      }
    } else {
      console.log(output);
    }
  }
}

