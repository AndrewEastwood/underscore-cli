#!/usr/bin/env node

var _       = require('underscore');
_.mixin(require('underscore.string'));
var program = require('commander');
var fs      = require('fs');
var util    = require('util');

try {
  version = JSON.parse(fs.readFileSync(__dirname + '/../package.json')).version;
} catch(e) {
  console.error("Error parsing 'package.json'.  Installation is corrupted: ", e.stack);
  version = 'unknown';
}

program.version(version);

function addStandardOptions(command) {
  command
    .option('-i, --in <filename>', 'The data file to load.  If not specified, defaults to stdin.')
    .option('-o, --out <filename>', 'The output file.  If not specified, defaults to stdout.')
    .option('-d, --data <JSON>', 'Input data provided in lieu of a filename')
    .option('--strict', "Use strict JSON parsing instead of more lax 'eval' syntax.  To avoid security concerns, use this with ANY data from an external source.")
}

function addExpressionOptions(command) {
  command.option('--nowrap', "Instead of an expression like 'value+1', provide a full function body like 'return value+1;'.");
}

addStandardOptions(program);
addExpressionOptions(program);

program.commandHelp = function () {
  var cmds = _(program.commands)
    .reject(function (cmd) { return cmd.name === '*'; })
    .map(function(cmd){
      var args = _(cmd.args)
        .map(function(arg){
          return arg.required
            ? '<' + arg.name.replace('expression', 'exp') + '>'
            : (arg.name == 'command' ? '[' + arg.name + ']' : '');
        })
        .join(' ');
      return [cmd.name + ' ' + args, cmd.description()];
    });

  var maxlen = _.max(_.map(cmds, function (cmd) { return cmd[0].length; }));

  return _.map(cmds, function (cmd) {
    return _.sprintf('%-' + maxlen + 's %s', cmd[0], cmd[1]);
  }).join('\n').replace(/^/gm, ' ');
};

program.helpInformation = function () {
  var opts = _.reject(program.options, function (o) { return o.flags.match(/--in|--data/); });
  var optsStr = '[--in <filename>|--data <JSON>] ' + _.compact(opts.map(function (o) { return o.flags.match('version') ? null : '[' + o.flags.replace(/.*, */, '') + ']' })).join(' ');
  return [
      ''
    , '  Usage: ' + program.name + ' <command> ' + optsStr
    , ''
    , '  Commands:'
    , ''
    , '' + program.commandHelp().replace(/^/gm, '    ')
    , ''
    , '  Options:'
    , ''
    , '' + program.optionHelp().replace(/^/gm, '    ')
    , ''
    , '  Examples:'
    , ''
    , '' + program.examplesHelp().replace(/^/gm, '    ')
    , ''
    , "See '" + program.name + " help <command>' for more information on a specific command."
  ].join('\n');
};

program.Command.prototype.examplesHelp = function () {
  var examples = this.examples;
  if (!_.isArray(examples)) {
    examples = [examples];
  }
  return _.map(examples, function (example) {
    return _.map(example, function (result, text) {
      if (!_.isString(result)) {
        result = util.inspect(result, false, 99);
      }
      return "# underscore " + text + "\nprints: " + result + "\n";
    }).join("\n");
  }).join("\n");
};

function defineCommand(opts) {
  var name = opts.name;
  var description = opts.description;
  var fn = opts.fn;

  var cmd = program.command(name).description(description);

  if (opts.fn) {
    addStandardOptions(cmd);
    if (opts.expr) {
      addExpressionOptions(cmd);
      cmd.action(function(expression, a, b, c) {
        var userFn = getUserFn(expression, opts.expr);
        processData(function(data) {
          return fn(data, userFn, a, b, c);
        });
      });
    } else {
      cmd.action(function(a, b, c) {
        processData(function (data) {
          return fn(data, a, b, c);
        });
      });
    }
  }
  
  if (opts.examples) {
    cmd.examples = opts.examples;
  }
  
  cmd.helpInformation = function () {
    return [
        ''
      , '  Usage: ' + program.name + ' ' + opts.name + (opts.name.match(/\[|\</) ? '' : ' [options]')
      , ''
      , '  ' + description
      , ''
      , '  Options:'
      , ''
      , '' + cmd.optionHelp().replace(/^/gm, '    ')
      , ''
      , '  Examples:'
      , ''
      , '' + cmd.examplesHelp().replace(/^/gm, '    ')
    ].join('\n');
  };

  return cmd;
}

function printHelp() {
  if (arguments.length > 0) {
    console.error.apply(console.error, arguments);
    console.error(program.helpInformation());
    process.exit(1);
  } else {
    console.log(program.helpInformation());
    process.exit(0);
  }
}

program.command('*').action(function (cmd) {
  printHelp("Unknown command: '%s'", cmd);
});

defineCommand({
  name: 'help [command]',
  description: "Print more detailed help and examples for a specific command"
}).action(function(command) {
  if(! command) {
    printHelp();
  } else {
    var commandObj = _.find(program.commands, function (obj) { return obj.name==command });
    if(commandObj) {
      console.log(commandObj.helpInformation());
      process.exit(0);
    } else {
      printHelp("Unknown command: " + command);
    }
  }
});

defineCommand({
  name: 'examples',
  description: "Print an exhaustive list of ALL examples"
}).action(function() {
  var examples = _.compact(_.pluck(program.commands, 'examples'));
  console.log(program.Command.prototype.examplesHelp.apply({examples: examples}));
  process.exit(0);
});

defineCommand({
  name: 'print',
  description: "Output the data without any transformations. Can be used to pretty-print JSON data.",
  fn: function (data) { return data; },
  examples: {
    "print --data '[1, 2, 3, 4]'": [1, 2, 3, 4],
    "cat data.json | underscore print": {foo: 'bar', baz: [1, 2, 3]},
  }
});

defineCommand({
  name: 'map <expression>',
  description: "Map each value from a list/object through a transformation expression whose arguments are (value, key, list).'",
  expr: ["value", "key", "list"],
  fn: _.map,
  examples: {
    "map --data '[1, 2, 3, 4]' 'value+1'":  [2, 3, 4, 5],
  }
});

defineCommand({
  name: 'reduce <expression> [initial_value]',
  description: "Boil a list down to a single value by successively combining each element with a running total.  Expression args: (total, value, key, list)",
  expr: ['total', 'value', 'key', 'list'],
  fn: function (data, userFn, initial) { 
    if (initial) {
      return _.reduce(data, userFn, jsonParse(initial, 'initial_value'));
    } else {
      return _.reduce(data, userFn); // total == first value
    }
  },
  examples: {
    "reduce --data '[1, 2, 3, 4]' 'total+value'":        "10",
    "reduce --data '[1, 2, 3, 4]' 'total+\"\"+value'":   "1234",
    "reduce --data '[1, 2, 3, 4]' 'total+\"\"+value' 0": "01234",
  }
});

defineCommand({
  name: 'reduceRight <expression> [initial_value]',
  description: "Right-associative version of reduce. ie, 1 + (2 + (3 + 4)). Expression args: (total, value, key, list)",
  expr: ['total', 'value', 'key', 'list'],
  fn: function (data, userFn, initial) { 
    if (initial) {
      return _.reduceRight(data, userFn, jsonParse(initial, 'initial_value'));
    } else {
      return _.reduceRight(data, userFn); // total == first value
    }
  },
  examples: {
    "reduceRight --data '[1, 2, 3, 4]' 'total+value'": "10",
    "reduceRight --data '[1, 2, 3, 4]' 'total+\"\"+value'": "4321",
    "reduceRight --data '[1, 2, 3, 4]' 'total+\"\"+value' 0": "04321",
  }
});

defineCommand({
  name: 'find <expression>',
  description: "Return the first value for which the expression Return a truish value.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.find,
  examples: {
    "find --data '[1, 2, 3, 4]' 'value > 2'": "3",
    "find --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": "2",
  }
});

defineCommand({
  name: 'filter <expression>',
  description: "Return an array of all values that make the expression true.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.filter,
  examples: {
    "filter --data '[1, 2, 3, 4]' 'value > 2'": [3, 4],
    "filter --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": [2],
  }
});

defineCommand({
  name: 'reject <expression>',
  description: "Return an array of all values that make the expression false.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.reject,
  examples: {
    "reject --data '[1, 2, 3, 4]' 'value > 2'": [1, 2],
    "reject --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": [1],
  }
});

defineCommand({
  name: 'flatten', 
  description: "Flattens a nested array (the nesting can be to any depth). If you pass '--shallow', the array will only be flattened a single level.",
  fn: function (data) { return _.flatten(data, program.args[0].shallow ? true : false); },
  examples: {
    "flatten --data '[1, [2, [3]], 4]'":            [1, 2, 3, 4],
    "flatten --shallow --data '[1, [2, [3]], 4]'":  [1, 2, [3], 4]
  }
}).option('--shallow', 'Only flatten array by a single level');

defineCommand({
  name: 'pluck <key>',
  description: "Extract a single property from a list of objects",
  fn: _.pluck,
  examples: {
    "pluck --data \"[{name : 'moe', age : 40}, {name : 'larry', age : 50}, {name : 'curly', age : 60}]\" name": ["moe", "larry", "curly"]
  }
});

defineCommand({
  name: 'keys',
  description: "Retrieve all the names of an object's properties.",
  fn: _.keys,
  examples: {
    "keys --data '{name : \"larry\", age : 50}'": ["name", "age"],
    "keys --data '[8, 9, 10]'": ['0', '1', '2'],
  }
});

defineCommand({
  name: 'values',
  description: "Retrieve all the values of an object's properties.",
  fn: _.values,
  examples: {
    "values --data '{name : \"larry\", age : 50}'": ["larry", 50],
    "values --data '[8, 9, 10]'": [8, 9, 10],
  }
});

defineCommand({
  name: 'extend <object>',
  aliases: ['override'],
  description: "Override properties in the input data.",
  fn: function (data, data2) {
    data2 = jsonParse(data2, 'override_data');
    return _.extend(data, data2);
  },
  examples: {
    "extend --data '{name : \"larry\", age : 50}' '{age: 65}'": {name: "larry", age: 65}
  }
});

defineCommand({
  name: 'defaults <object>',
  description: "Fill in missing properties in the input data.",
  fn: function (data, data2) {
    data2 = jsonParse(data2, 'default_data');
    return _.defaults(data, data2);
  },
  examples: {
    "defaults --data '{name : \"larry\", age : 50}' '{name: \"unknown\", salary: 100}'": {name: "larry", age: 50, salary: 100}
  }
});

defineCommand({
  name: 'any <expression>',
  description: "Return 'true' if any of the values in the input make the expression true.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.any,
  examples: {
    "any --data '[1, 2, 3, 4]' 'value > 5'": "false",
    "any --data '[1, 2, 3, 4]' 'value > 2'": "true",
    "any --data '[1, 2, 3, 4]' 'value > 0'": "true",
    "any --data '{foo: 1, bar: 2}' 'key == \"bar\"'": "true",
  }
});

defineCommand({
  name: 'all <expression>',
  description: "Return 'true' if all values in the input make the expression true.  Expression args: (value, key, list)",
  expr: ['value', 'key', 'list'],
  fn: _.all,
  examples: {
    "all --data '[1, 2, 3, 4]' 'value > 5'": "false",
    "all --data '[1, 2, 3, 4]' 'value > 2'": "false",
    "all --data '[1, 2, 3, 4]' 'value > 0'": "true",
    "all --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": "false",
  }
});

defineCommand({
  name: 'isObject',
  description: "Return 'true' if the input data is an object with named properties",
  fn: function (data) {
    if (program.args[0].arraysAreObjects) {
      return _.isObject(data);
    } else {
      return _.isObject(data) && ! _.isArray(data);
    }
  },
  examples: {
    "isObject --data '{name : \"larry\", age : 50}'": true,
    "isObject --data '[]'": false,
    "isObject --data '[]' --arrays-are-objects": true
  }
}).option('--arrays-are-objects', 'Restore the default underscore.js behavior where Array() is a type of object');

defineCommand({
  name: 'isArray',
  description: "Return 'true' if the input data is an array",
  fn: _.isArray,
  examples: {
    "isArray --data '{name : \"larry\", age : 50}'": false,
    "isArray --data '[]'": true
  }
});

defineCommand({
  name: 'isString',
  description: "Return 'true' if the input data is a string",
  fn: _.isString,
  examples: {
    "isString --data '{}'": false,
    "isString --data '[]'": false,
    "isString --data \"'foo'\"": true
  }
});

defineCommand({
  name: 'isNumber',
  description: "Return 'true' if the input data is a number",
  fn: _.isNumber,
  examples: {
    "isNumber --data '{}'": false,
    "isNumber --data '[]'": false,
    "isNumber --data \"'9'\"": false,
    "isNumber --data \"9\"": true,
  }
});


// Object Stuff
//functions - does this make sense?  point it at a module with 'eval/require'

// other
// range
// indexOf
// lastIndexOf
// zip
// [mine] zipObject
// uniq
// intersection
// [skip] difference
// union
// without
// [mine] withoutKeys
// compact
// map --compact
// last
// first

// Tests
//getType


program
  .parse(process.argv);

if (program.args.length === 0) {
  printHelp();  
}

function getUserFn(expression, args) {
    var code = '(function (' + args.join() + '){' + 
      (program.nowrap ? expression : ('return (' + expression + ');')) + 
    '})';
    try {
        var userFn = eval (code);
    } catch (e) {
      console.error("Error when compiling user expression '%s': %s", code, e.message);
      process.exit(-1);
    }
    return userFn;
}

function jsonParse(text, source) {
  if (text === undefined) {
    return undefined;
  }
    if (program.strict) {
      try {
        return JSON.parse(text);
      } catch (e) {
        console.error("Error while JSON parsing %s: %s", source, e.message);
        process.exit(-1);
      }
    } else {
      try {
        return eval("ret=" + text); // somehow, adding "ret=" makes this work.  else objects don't parse correctly
      } catch (e) {
        // TODO: print location where things went wrong
        console.error("DATA: " + text);
        console.error("Error while JSONlax ('eval') parsing %s: %s", source, e.stack);
        process.exit(-1);
      }
    }
}

function processData(fn) {
  inputData(function(data) {
    try {
      var output = fn(data);
    } catch (e) {
      console.error("Error while processing data: %s", e.stack);
      process.exit(-1);
    }
    outputData(output);
    process.exit(0);
  });
}

function inputData(cb) {
  var text, data;
  if (program.data) {
    text = program.data;
    data = jsonParse(text, "'data' argument");
    cb(data);
  } else if (program.in) {
    try {
      text = fs.readFileSync(program.in);
    } catch (e) {
      console.error("Error while reading input file '%s': %s", program.in, e.message);
      process.exit(-1);
    }
    var data = jsonParse(text, "input data from '" + program.in + "'");
    cb(data);
  } else {
    process.stdin.resume();
    text = "";
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', function (d) {
      text += d;
    });
    process.stdin.on('end', function () {
      data = jsonParse(text, 'input data from (stdin)');
      cb(data);
    });
  }  
}

function outputData(data, cb) {
  if (program.out) {
    try {
      fs.writeFileSync(program.out, data);
    } catch (e) {
      console.error("Error while writing to output file '%s': ", program.out, e.message);
      process.exit(-1);
    }
  } else {
    console.log(data);
  }
}

