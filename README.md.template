# Overview

JSON is an excellent data interchange format and rapidly becoming the preferred format for Web APIs.
Thusfar, most of the tools to process it are very limited.  Yet, when working in Javascript, JSON is fluid and natural.  

<b>Why can't command-line Javascript / JSON be easy?</b>

Underscore-CLI can be a simple pretty printer:

    cat data.json | underscore print

Or it can form the backbone of a rich, full-powered Javascript command-line, inspired by "perl -pe", and doing for structured data what sed, awk, and grep do for text.
    
    curl -s http://www.reddit.com/r/earthporn.json | underscore extract 'data.children' | underscore pluck data | underscore pluck title

See [Real World Example] (#real_world_example) for the output and a few other variants.  

### Features

 * **FLEXIBLE** - THE "swiss-army-knife" tool for processing JSON data - can be used as a simple pretty-printer, or as a full-powered Javascript command-line
 * **POWERFUL** - Exposes the full power and functionality of [underscore.js] (http://documentcloud.github.com/underscore/) (plus [underscore.string] (https://github.com/epeli/underscore.string))
 * **SIMPLE** - Makes it simple to write JS one-liners similar to using "perl -pe"
 * **CHAINED** - Multiple command invokations can be chained together to create a data processing pipeline
 * **MULTI-FORMAT** - Rich support for input / output formats - pretty-printing, strict JSON, etc [coming soon]
 * **DOCUMENTED** - Excellent command-line documentation with multiple examples for every command

### Installing Underscore-CLI

If you don't yet have [Node](http://nodejs.org/#download), see [Installing Node](#installing_node).

    npm install -g underscore-cli
    underscore help

### Usage

If you run the tool without any arguments, this is what prints out:

<%= usage.replace(/^/gm, '  ') %>

# Real World Example
<a id="real_world_example" name="real_world_example"></a>

Let's play with a real data source, like http://www.reddit.com/r/earthporn.json.  For convenience (and consistent test results), an abbreviated version of this data is stored in example-data/earthporn.json.  Let's say you want a list of all the image titles ...

Using JSONSelect, this is trivial:

    cat example-data/earthporn.json | underscore select '.data .title'
 
Alternatively, you could do it the traditional way:

    cat example-data/earthporn.json | underscore extract 'data.children' | underscore pluck data | underscore pluck title

Which prints:

    [ 'Fjaðrárgljúfur canyon, Iceland [OC] [683x1024]',
      'New town, Edinburgh, Scotland [4320 x 3240]',
      'Sunrise in Bryce Canyon, UT [1120x700] [OC]',
      'Kariega Game Reserve, South Africa [3584x2688]',
      'Valle de la Luna, Chile [OS] [1024x683]',
      'Frosted trees after a snowstorm in Laax, Switzerland [OC] [1072x712]' ]


Hmm, I think I'd like code-worthy names for those images.

Underscore-CLI exposes the function from [underscore.js] (http://documentcloud.github.com/underscore/) and [underscore.string] (https://github.com/epeli/underscore.string)) not only as first-class commands, but also within command-line Javascript expressions:

    cat earthporn.json | underscore select '.data .title' | underscore map '_.camelize(value.replace(/\[.*\]/g,"")).replace(/[^a-zA-Z]/g,"")'
 
Which prints ...

    [ 'FjarrgljfurCanyonIceland',
      'NewTownEdinburghScotland',
      'SunriseInBryceCanyonUT',
      'KariegaGameReserveSouthAfrica',
      'ValleDeLaLunaChile',
      'FrostedTreesAfterASnowstormInLaaxSwitzerland' ]

Try doing THAT with any other one-liner!


# Installing Node (command-line javascript)
<a id="installing_node" name="installing_node"></a>

This tool makes heavy use of Javascript.  Node is very easy to install and rapidly becoming _the_ way to run javascript from the command-line: [Download Node](http://nodejs.org/#download)

Alternatively, if you do [homebrew](http://mxcl.github.com/homebrew/), you can:

    brew install node

For more details on what node is, see [this StackOverflow thread](http://stackoverflow.com/questions/1884724/what-is-node-js/6782438#6782438)

# Alternatives

* [jsonpipe] (https://github.com/dvxhouse/jsonpipe) - Python focused, w/ a featureset centered around a single scenario
* [jshon] (http://kmkeen.com/jshon/) - Has a lot of functions, but very terse
* [json-command] (https://github.com/zpoley/json-command) - very limited
* [TickTick] (https://github.com/kristopolous/TickTick) - Bash focused JSON manipulation.  Iteresting w/ heavy Bash integration. Complements this tool.
* [json] (https://github.com/trentm/json) - Similar idea.
* [jsawk] (https://github.com/micha/jsawk) - Similar idea. Uses a custom JS environment. Good technical documentation.
* [jsonpath] (http://code.google.com/p/jsonpath/wiki/Javascript) - this is not a CLI tool.  It's a runtime JS library.
* [json:select()] (http://jsonselect.org/#tryit) - this is not a CLI tool.  CSS-like selectors for JSON.  Very interesting idea that I might add as annother command to Underscore-CLI

Please add a Github issue if I've missed any.

